name: Build Genom Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_HOTFIX:
        description: 'ChangeLogs'
        required: false
        default: 'update'
      ENABLE_LTO: 
        description: 'Enable Clang LTO'
        required: true
        default: 'true'

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "ANYKERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "ANYKERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(cat config.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat config.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(cat config.env | grep -w "BUILD_ARGS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          echo "PROCS=$(nproc --all)" >> GITHUB_ENV
          
      # Set swap space
      - name: üìê Set swap to 12GB
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      # Install prerequisites for Ubuntu
      - name: ‚≠ê Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get upgrade
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev python3
          sudo apt-get install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven ca-certificates
          sudo apt-get install -y libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          sudo apt-get install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex 
          sudo apt-get install -y build-essential bc libssl-dev libfl-dev nano libc6-dev openssl ssh zstd
          sudo apt-get install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar g++-multilib bison gperf zlib1g-dev automake
          sudo apt-get install -y software-properties-common libffi-dev libncurses5-dev zlib1g libreadline-dev libsqlite3-dev 
          sudo apt-get install -y pigz git-lfs gnupg imagemagick lib32readline-dev lib32z1-dev libelf-dev libncurses5 libsdl1.2-dev 
          sudo apt-get install -y libxml2 rsync adb fastboot
          
      - name: üí´ Get toolchains
        run: |
          mkdir ${{ github.workspace }}/clang
          cd clang
          git clone https://github.com/rosemaryuser/clang-genom-kernel --depth=1 ${{ github.workspace }}/clang

      - name: üåü Clone kernel source
        run: |
           mkdir ${{ github.workspace }}/kernel-source
           git clone --depth=1 ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} ${{ github.workspace }}/kernel-source
           
      - name: Enable thin lto or not
        run: |
          if [ ${{ inputs.ENABLE_LTO }} == true ]; then
            echo "NAMELTO=-LTO" >> GITHUB_ENV
            echo "CONFIG_LTO_CLANG=y" >>  ${{ github.workspace }}/kernel-source/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
          fi

      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: |
          export TZ="Asia/Kuala Lumpur"
          echo "date=$(date)" 
          echo "zdate=$(date +%m%d)" >> GITHUB_ENV
          
          
      - name: üêé Build kernel
        run: |
          cd ${{ github.workspace }}/kernel-source
          echo "HASH_HEAD=$(git rev-parse --short HEAD)" >> GITHUB_ENV
          echo "COMMIT_HEAD=$(git log --oneline -1)" >> GITHUB_ENV
          echo "time_start=$(date +%s)" >> GITHUB_ENV
          export PATH=${{ github.workspace }}/clang/bin:${PATH}
          echo "KERNEL_VER=$(make kernelversion)" >> $GITHUB_ENV
          echo "CLANG_VER=$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')" >> $GITHUB_ENV
          export KBUILD_BUILD_USER="NYO"
          export KBUILD_BUILD_HOST="github_workspace"
          args="                  ARCH=arm64 \
                                  CC=clang \
                                  O=../out \
                                  ${{ env.BUILD_ARGS }} \
                                  CROSS_COMPILE=aarch64-linux-gnu-
                                  CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
                                  "
          cd ${{ github.workspace }}/kernel-source
          make clean
          make O=../out ARCH=arm64 ${{ env.KERNEL_CONFIG }}
          make -j$(nproc --all) ${args}
          
      - name: ‚è∞ Set build end time
        id: generate_build_end      
        run: echo "end_time=$(date +%s)" 
          
      - name: ‚è∞ Calculate difference between time start and end build
        id: time_difference
        run: echo "DIFF=$((${{ steps.generate_build_end.outputs.end_time }} - ${{ env.time_start }}))" 

      - name: ‚åõ Time taken for build
        id: time_taken
        run:  echo "took=$((${{ steps.time_difference.outputs.DIFF }} / 60)) minute(s) and $((${{ steps.time_difference.outputs.DIFF }} % 60)) second(s)" 
        
      - name: üì¶ Pack Anykernel3
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
           if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb ./AnyKernel3/
          else
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img ./AnyKernel3/
            fi
          fi

          cd AnyKernel3/
          zip -r9 "[${{ env.zdate }}][rosemary]${{ env.KERNEL_VER }}-Genom-R${{ env.NAMELTO }}-${{ env.HASH_HEAD }}.zip" -- *
        
      - name: üßß Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ['${{ env.zdate }}'][rosemary]${{ env.KERNEL_VER }}-Genom-R${{ env.NAMELTO }}-${{ env.HASH_HEAD }}.zip
          name: kernel-release
          tag_name: Genom.${{ steps.generate-builddate.outputs.date }}
          body: |
            Repo: ${{ env.KERNEL_SOURCE }}
            Branch: ${{ env.KERNEL_SOURCE_BRANCH }}
            Config: ${{ env.KERNEL_CONFIG }}
          
      - name: Fast Telegram Action
        uses: s00d/fast-telegram-action@v9    
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_TO }}
          format: html
          disable_web_page_preview: true
          message: |
            <b>Build info</b>
            <b>Build Started Date: </b>${{ steps.generate-builddate.outputs.date }}
            <b>Top Commit: </b>${{ env.COMMIT_HEAD }} 
            <b>Core Count : </b>${{ env.PROCS }} cores
            <b>Enabled LTO Clang: </b>${{ github.events.inputs.ENABLE_LTO }}
          
            <a href="https://github.com/${{ github.repository }}/releases/tag/Genom-${{ env.date }}">Download</a>

            <b>ChangeLogs:</b>
            ${{ github.event.inputs.KERNEL_HOTFIX }}

            <b>Build took: </b>${{ steps.time_taken.outputs.took }}
            <b>Config: </b>${{ env.KERNEL_CONFIG }}
            <b>Kernel Ver: </b>${{ env.KERNEL_VER }}
            <b>Clang Ver: </b>${{ env.CLANG_VER }}
            <b>Maintainer: </b>@NYO
