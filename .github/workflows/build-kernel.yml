name: Build Genom Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_HOTFIX:
        description: 'ChangeLogs'
        required: false
        default: 'update'

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "ANYKERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "ANYKERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(cat config.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat config.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(cat config.env | grep -w "BUILD_ARGS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV


      # Set swap space
      - name: 📐 Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      # Install prerequisites for Ubuntu
      - name: ⭐ Install prerequisites
        run: |
          apt install sudo 
          sudo apt-get update && sudo apt-get upgrade
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev python3
          sudo apt-get install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven ca-certificates
          sudo apt-get install -y libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          sudo apt-get install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex 
          sudo apt-get install -y build-essential bc libssl-dev libfl-dev nano libc6-dev openssl ssh zstd
          sudo apt-get install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar g++-multilib bison gperf zlib1g-dev automake
          sudo apt-get install -y software-properties-common libffi-dev libncurses5-dev zlib1g libreadline-dev libsqlite3-dev 
          sudo apt-get install -y pigz git-lfs gnupg imagemagick lib32readline-dev lib32z1-dev libelf-dev libncurses5 libsdl1.2-dev 
          sudo apt-get install -y libxml2 rsync adb fastboot
          
      - name: Pull toolchain
        run: |
          mkdir ${{ github.workspace }}/clang
          cd clang
          git clone https://github.com/rosemaryuser/clang-genom-kernel --depth=1 ${{ github.workspace }}/clang

      - name: Pull kernel source
        run: |
           mkdir ${{ github.workspace }}/kernel-source
           git clone --depth=1 ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} ${{ github.workspace }}/kernel-source

      - name: Build kernel
        run: |
          export PATH=${{ github.workspace }}/clang/bin:${PATH}
          echo "KERNEL_VER=$(make kernelversion)" >> $GITHUB_ENV
          echo "CLANG_VER=$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')" >> $GITHUB_ENV
          export TZ="Asia/Kuala Lumpur"
          export KBUILD_BUILD_USER="NYO"
          export KBUILD_BUILD_HOST="github_workspace"
          args="                  ARCH=arm64 \
                                  CC=clang \
                                  O=../out \
                                  ${{ env.BUILD_ARGS } \
                                  CROSS_COMPILE=aarch64-linux-gnu-
                                  CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          cd ${{ github.workspace }}/kernel-source
          make clean
          make ${args} ${{ env.KERNEL_CONFIG }}
          make -j$(($(getconf _NPROCESSORS_ONLN) * 2)) ${args}

      - name: Package kernel
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: output_kernel
          path: AnyKernel3/*

      - name: Fast Telegram Action
        uses: s00d/fast-telegram-action@v9    
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_TO }}
          format: html
          disable_web_page_preview: true
          message: |
            <b>Build ended</b>

            <b>Build Date: </b>$(date)
          
            <a href="https://github.com/${{ github.repository }}/releases/tag/${{ env.BUILD_DATE }}">Download</a>
          
            <a href="${{ github.event.inputs.KERNEL_REPO }}/commits/${{ github.event.inputs.KERNEL_BRANCH }}">Changelogs</a>

            <b>ChangeLogs:</b>
            ${{ github.event.inputs.KERNEL_HOTFIX }}

            <b>Config: </b>${{ env.KERNEL_CONFIG }}
            <b>Kernel Ver: </b>${{ env.KERNEL_VER }}
            <b>Clang Ver: </b>${{ env.CLANG_VER }}
            <b>Maintainer: </b>@NYO
